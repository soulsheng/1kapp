<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"> 
<html> 
<head> 
<script language="JavaScript"> 
  var prePage="end";
  var nextPage="01.htm";
  var testPage="end";
  var labPage="end";
  var libraryPage="end";
  var studyPage="end";
  var homePage="end";
	function showwin(url,winname,properties){
		window.open(url,winname,properties)
	}
</script> 
<meta http-equiv="Content-Type" content="text/html; charset=gb2312"> 

<title>13.1 计算机网络技术概述</title> 
<link href="images/css.css" rel="stylesheet" type="text/css"> 
</head> 

<body topmargin="0">
<p align="center" class="t1"><br>
  Internet寻址</p>
　　CP是一种可靠的网络通信协议，它要求通信的双方必须建立一个连接，然后才能接受数据，通信结束后，关闭网络连接。TCP通信协议为通信双方提供了一个点对点(peer-to-peer)的通道，保证了数据通信的可靠性。<br>
　　例1：典型的TCP应用程序有HTTP（Hypertext Transfer Protocol），FTP(File Transfer Protocol)和Telnet。<br>
　　<img src="images/STAR.GIF" width="18" height="20">UDP在每次通信时都发送一个独立数据报，这种通信方式非常类似于日常生活中的信件通信：发送的顺序并不重要，也无法保证。目前，由于网络通信质量的不断提高，UDP的应用越来越广泛，它与TCP相比具有系统开销小的优点。<br>
　　例2：UDP的一个典型应用就是用以测试计算机网络连接之间的通信是否畅通的ping命令。<br>
<p align="center" class="t1">IP地址与URL定位</p>
　　<img src="images/STAR.GIF" width="18" height="20">IP地址：惟一标识连接到Internet的计算机的数字地址，它与端口（Port）一起为网络通信的应用程序提供了一种确切的地址标识作用。一个IP地址实际上是由32位二进制数组成，如202.119.3.2。IP地端口号的范围从0到65535，数量是一个16的整数，其中0～1023以下的端口号由系统使用，例如http服务的端口号为80。用户自定义的程序进行通信时，端口号应该在1024～65535。<br>
　　<img src="images/STAR.GIF" width="18" height="20">使用URL定位资源：标识计算机上的资源。具体地说，可以将URL看作一个指针，它指向Web站点上的Web页、二进制文件以及其他信息对象。向浏览器的地址栏输入一个网址时，例如http://www.fudan.edu.cn/，实际上就是提供了该站点主页的URL。浏览器通过解析给定的URL可以在网络上查找到相应的文件或其他资源。<br>
<p align="center" class="t1">客户/服务器　</p>
<p>　　<img src="images/STAR.GIF" width="18" height="20">客户机/服务器是一种分布信息或文件的方法，其中应用程序通过一个中央服务器对资源进行归档（存储），可以通过客户应用程序请求获得。<br>
  　　<img src="images/STAR.GIF" width="18" height="20">通过URL获取网络信息：在java.net包中提供URL类，能在源代码层使用URL，每一个URL对象都封装了资源的标识符和协议处理程序。可以通过调用URL构造方法来建立URL对象，也可以调用URL的方法来提取URL的网络信息。打开一个输入流（input 
  stream）从资源中读取信息，获得某个能方便检索资源数据的对象的引用。<br>
  　　<img src="images/STAR.GIF" width="18" height="20">URL类提供用于创建URL对象的常用的构造方法如下（均会抛出异常）：<br>
  public URL(String url)；//使用URL字符串<br>
  public URL(URL context，String spec);//除了URL对象外，还给出相对于context的偏移量<br>
  public URL (String protocol,String host, String file);//指定协议、主机名、文件名<br>
  public URL(String protocol , String host, int port, String file);//指定协议、主机名、端口号、文件名<br>
  　　例3：<br>
  URL url = new URL (&quot;http://www.informit.com&quot;);<br>
  //下列语句则表示http://www.informit.com/pub/local.html<br>
  URL urlNew=new URL(url, &quot;pub/local.html&quot;);<br>
  URL url1=new URL(&quot;http&quot;,&quot;www.informit.com&quot;,&quot;index.html&quot;);<br>
  URL url2=new URL(&quot;http&quot;,&quot;www.informit.com&quot;,80,&quot;index.html&quot;);<br>
一旦拥有了URL对象，你就可以使用表13-1所示的URL类的方法：</p>
<p align="center">
  　　URL类的方法(设URL url = new URL(&quot;http://hostname:80/index.html#-top-&quot; ))
</p>
<table width="100%" border="1" align="center" cellpadding="0" cellspacing="0">
  <tr> 
    <td><div align="center">方法 </div></td>
    <td><div align="center">说明 </div></td>
    <td><div align="center">举例</div></td>
  </tr>
  <tr> 
    <td>String getFile() </td>
    <td>返回该URL路径和文件名 </td>
    <td>index.html</td>
  </tr>
  <tr> 
    <td>String getHost() </td>
    <td>返回该URL主机名 </td>
    <td>hostname</td>
  </tr>
  <tr> 
    <td>String getPath() </td>
    <td>返回该URL路径名 </td>
    <td>index.html</td>
  </tr>
  <tr> 
    <td>int getPort() </td>
    <td>返回该URL端口号 </td>
    <td>80</td>
  </tr>
  <tr> 
    <td>String getProtocol() </td>
    <td>返回该URL协议名</td>
    <td> http</td>
  </tr>
  <tr> 
    <td>String getQuery() </td>
    <td>返回该URL的查询部分 </td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td>String getRef() </td>
    <td>返回该URL的anchor(或称ref) </td>
    <td>-top-</td>
  </tr>
  <tr> 
    <td>String getUserInfo()</td>
    <td> 返回该URL的用户信息 </td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td>InputStream OpenStream() </td>
    <td>打开该URL的输入流，不成功抛出异常 </td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td>boolean sameFile(URL other) </td>
    <td>比较两个URL（不包括ref） </td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td>boolean equals(Object obj) </td>
    <td>比较两个URL</td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td>String toString() </td>
    <td>将该URL对象转换为字符串形式</td>
    <td>&nbsp;</td>
  </tr>
</table>
　　
<p>　　<img src="images/STAR.GIF" width="18" height="20">在这些URL方法中，如果希望返回的内容不存在或者没有定义，字符串返回类型则返回null，int返回类型则返回-1。<br>
  　　<img src="images/STAR.GIF" width="18" height="20">作为这些获取URL信息方法的补充，你还可以调用openStream()方法检索远程网上信息，这个方法提供了读取URL描述对象内部数据的一种简单机制，它用面向字节的方式读取远程网上的资源。openStream()方法的返回类型是InputStream，属于java.io包。<br>
  　　【例13-1】使用URL类模仿远程获取本地文件的数据（协议名为file）<br>
（<a href="ch13/UrlSite.java" target="_blank">UrlSite.java</a>）</p>
<p align="center">
  <img src="images/13/131-1.jpg" width="461" height="135">
</p>
<p align="center" class="t1">TCP Socket</p>
　　<img src="images/STAR.GIF" width="18" height="20">套接字(Sockets)：由一个IP地址和一个端口号(Port)而成，它是两台机器进行通信的端点。<br>
　　<img src="images/STAR.GIF" width="18" height="20">TCP Sockets使用户能以自己的通信模式快速地开发“客户机/服务器”应用，它是应用程序通过网络与其他应用连接的一种工具。TCP 
sockets使用TCP协议，它继承了传输协议的行为。一个TCP Sockets包括以下四部分：<br>
　　　　<img src="images/STAR1.GIF" width="15" height="20">本地系统的IP地址。<br>
　　　　<img src="images/STAR1.GIF" width="15" height="20">本地应用程序正在使用的TCP端口（port）号。<br>
　　　　<img src="images/STAR1.GIF" width="15" height="20">远程系统的IP地址。<br>
　　　　<img src="images/STAR1.GIF" width="15" height="20">远程系统应用程序相应的TCP端口号。<br>
<p align="center" class="t1">TCP Socket</p>
运行结果：<br>
Faculties befor sorting:<br>
　fid　 fname 　Salary<br>
08361　 Tom 　　1890.98<br>
07651　 Jike　　3995.75<br>
08233 　Lucy 　 2070.62<br>
06163 　Anny 　 2070.62<br>
Faculties sorted by fid:<br>
fid 　　fname　 Salary<br>
06163 　Anny 　2070.62<br>
07651 　Jike 　3995.75<br>
08233 　Lucy 　2070.62<br>
08361 　Tom 　1890.98<br>
Faculties sorted by salary:<br>
fid 　　fname 　salary<br>
08361 　Tom 　　f1890.98<br>
06163 　Anny 　 f2070.62<br>
08233　 Lucy 　 f2070.62<br>
07651 　Jike 　 f3995.75<br>
Faculties sorted by salary:<br>
fid 　　fname 　salary<br>
08361 　Tom 　　f1890.98<br>
08233 　Lucy 　 f2070.62<br>
07651 　Jike 　 f3995.75<br>
06163 　Anny 　 f2070.62<br>
<p align="center" class="t1">查找</p>
　　<img src="images/STAR.GIF" width="18" height="20">Java标准库中的Collections类的方法binarySearch方法实现查找算法。注意，这个方法的作用对象（数据结构）必须是有序的，否则它将返回错误结果。为了保证查找结果的正确性，必须给出相应的实现了List接口的数据结构和待查元素。这个数据结构要么实现了Comparable接口，或提供了自己的排序方法。binarySearch()方法有两种形式：<br>
　　　　<img src="images/STAR1.GIF" width="15" height="20">第一种形式：dest=Collections. 
binarySearch(list, key);<br>
　　　　<img src="images/STAR1.GIF" width="15" height="20">第二种形式：dest=binarySearch( 
list, key, c);<br>
　　<img src="images/STAR.GIF" width="18" height="20">第一种形式要求List对象已经实现了Comparable接口，而第二种形式可以指定定义比较器c，如果没有指定就采用与第一种形式相同方式，表示采用List中实现的比较方法。如果返回值dest≥0，则这个值就是匹配元素的索引，这时可以通过list.get(dest)得到与key相同的元素；如果返回值dest＜0，表示没有查找到匹配的元素。<br>
　　【例12-7】分两种情况对一个链表中的元素进行查找：一种是元素没经过排序，另一元素经过排序。看看两种情况下，查找结果是否相同。（<a href="ch12/HalfLookup.java" target="_blank">HalfLookup.java</a>）<br>
运行结果：<br>
The position of Key is -1<br>
The position of Key is 0
</body> 
</html> 
