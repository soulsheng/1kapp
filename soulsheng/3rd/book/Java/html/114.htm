<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"> 
<html> 
<head> 
<script language="JavaScript"> 
  var prePage="end";
  var nextPage="01.htm";
  var testPage="end";
  var labPage="end";
  var libraryPage="end";
  var studyPage="end";
  var homePage="end";
	function showwin(url,winname,properties){
		window.open(url,winname,properties)
	}
</script> 
<meta http-equiv="Content-Type" content="text/html; charset=gb2312"> 

<title>11.4 多线程程序应用举例</title> 
<link href="images/css.css" rel="stylesheet" type="text/css"> 
</head> 

<body topmargin="0">
<p align="center" class="t1"><br>
  多线程程序应用举例　</p>
<p><a href="ch11/ExamProducerAndConsumer.java" target="_blank">【例11-5】一个经典的线程间同步的例子：生产者与消费者问题</a>。<br>
  　　在生产者与消息者问题中，生产者不断产生消息，并将消息放在消息队列中，而消费者不断从消息队列中取出消息，并显示出来。在示例中，我们为消息队列设置了一个最大的长度，而且为了更好地显示同步线程之间的关系，可以让消费者线程比生产者线程运行的慢些，这意味着生产者线程有时必须停下来等待消费者。<br>
　　<img src="images/STAR.GIF" width="18" height="20">生产者的生产速度（休眠1000毫秒）设置得比消费者的消费速度（休眠5000毫秒）快，所以生产者很快就将产品消息队列填满，随后不得不等待消费者从队列中取走产品。　　</p>
<p align="center">
<img src="images/111/111-5.jpg" width="669" height="438"></p>
　　<br>
　　<img src="images/STAR.GIF" width="18" height="20">产品消息队列类ProductMsgQueue中，方法putMessege()和getMessage()被定义为同步方法，它们都使用ProducerMsgQueue对象的监控器。putMessage的任务是将一个产品消息放入队列中，它首先检查队列中消息的个数，如果仍然有空间，它将产生一个消息并放入队列；如果队列已经满了，它必须等待，直到有空间为止，这时就需要调用方法wait()，希望消费者在读到一个消息之后调用notifyAll()唤醒它。方法中可以循环检查队列是否已满，在唤醒生产者后由于条件不具备再次进入等待状态。在生产者结束操作之后，它调用notifyAll()通知可能正在等待的消费者。<br>
　　<img src="images/STAR.GIF" width="18" height="20">getMessge()从队列中取得一条消息。它首先开始一个循环，以等待消息放入队列。如果队列为空，执行wait()，然后等待生产者的putMessage()调用notifyAll()通知它消息已经放入队列。getMessage()在退出前，调用notifyAll()通知生产者消息已经取走。由于某种原因生产者的运行速度比消费者快一些，这将使队列通常总处于充满的状态。<br>
　　<a href="ch11/ExamBadminton.java" target="_blank">【例11-6】编写一个多线程程序模拟羽毛球比赛中选手击球顺序情况。</a><br>
　　<img src="images/STAR.GIF" width="18" height="20">类Badminton包括了一个状态变量curPlayer和一个同步方法hit()。curPlayer给出下一个击球选手，方法hit()用来确定击球选手。在程序刚刚开始运行时，curPlayer为null，这时当前线程获得击球的权利，因此，第一个进入方法hit()的线程将得到先行击球的权利。<br>
　　<img src="images/STAR.GIF" width="18" height="20">击球开始后，如果当前线程的名字与curPlayer指定的选手相同，则当前线程击球，并将curPlayer置为对手的名字，然后线程通过notifyAll()唤醒其他等待的线程。如果击球手或对手的名字为“DONE”，hit()将返回false，从而导致线程终止。<br>
　　<img src="images/STAR.GIF" width="18" height="20">通过类Badminton，任何含有该类对象的线程都可以和含有同一个对象的其他线程进行同步操作。类Player中含有Badminton类对象并实现线程体run()，循环调用方法hit()，直到它返回false为止。最后生成类ExamBatminton，它以Player类的对象为目标产生并启动两个线程。　　
<p align="center">
  <img src="images/111/111-6.jpg" width="669" height="438">
</p>
</body> 
</html> 
