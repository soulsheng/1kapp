<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"> 
<html> 
<head> 
<script language="JavaScript"> 
  var prePage="end";
  var nextPage="01.htm";
  var testPage="end";
  var labPage="end";
  var libraryPage="end";
  var studyPage="end";
  var homePage="end";
	function showwin(url,winname,properties){
		window.open(url,winname,properties)
	}
</script> 
<meta http-equiv="Content-Type" content="text/html; charset=gb2312"> 

<title>6.4对象数组</title> 
<link href="images/css.css" rel="stylesheet" type="text/css"> 
</head> 

<body topmargin="0">
<p align="center" class="t1"><br>
对象数组的定义与使用</p>
　　数组的基本元素也可以是类的对象，此时数组元素并不是存放对象本身，而是存放对象的“地址”，这就意味着在赋值对象的地址到数组以前，必须先创建类的对象。其步骤为：<br>
　　<img src="images/STAR.GIF" width="18" height="20">定义一个数组：className 
name[]=new className[size]；<br>
　　<img src="images/STAR.GIF" width="18" height="20">创建类的对象，赋值对象的地址:<br>
　　　　<img src="images/STAR1.GIF" width="15" height="20">创建对象的同时，赋值对象地址：name[j]=new 
className(actualParameterList);<br>
　　　　<img src="images/STAR1.GIF" width="15" height="20">先创建对象className varName=new 
className(actualParameterList);然后赋值对象地址name[j]=varName;<br>
　　<img src="images/STAR.GIF" width="18" height="20">数组对象的引用：<br>
　　　　<img src="images/STAR1.GIF" width="15" height="20">方法的引用name[j]. methodName(actualArgumentList);<br>
　　　　<img src="images/STAR1.GIF" width="15" height="20">属性的引用name[j].attribute;(该属性必须定义为公共的)<br>
例8：<br>
Date dates[]=new Date[10];//定义一个Date类对象数组，长度为10<br>
Date d1=new Date（12，12，2004）；//创建Date类的对象d1<br>
dates[2]=d1；//赋值对象d1地址<br>
dates[2].display();//引用对象d1的display()方法<br>
或者<br>
dates[2]= new Date（12，12，2004）;<br>
<p align="center" class="t1">举例</p>
　　<a href="ch6/ch6ex22.java" target="_blank">【例6-22】编程创建一个30个日期的数组，选择并输出属于任何一年中2月、7月以及10月的日期</a>。<br>
　　<img src="images/STAR.GIF" width="18" height="20">请读者思考一下，程序生成的某月中的天是否合理，如不合理程序该作怎样的修改（每一个月的最大天数是不同的）？<br>
　　<img src="images/STAR.GIF" width="18" height="20">方法（函数）可以有不同的返回类型，实际上它可以是基本数据类型，也可以是对象返回类型。<br>
<p align="center" class="t1">向量类</p>
　　向量是一个动态的对象数组，每一个地址对应一个对象，其特点是<br>
　　<img src="images/STAR.GIF" width="18" height="20">本身具有一定数量的方法，提供用户进行插入、删除、搜索等常用操作，<br>
　　<img src="images/STAR.GIF" width="18" height="20">可以在同一个向量中存放不同类型的对象<br>
　　<img src="images/STAR.GIF" width="18" height="20">动态特性使用户在编程时，不需要定义大小，当需要插入新的对象时，向量可自动增加空间<br>
　　<img src="images/STAR.GIF" width="18" height="20">向量类是java.util包中的一部分，如要使用向量类，必须在程序中使用import语句将其引入<br>
<table width="87%" height="400" border="1" align="center" cellpadding="0" cellspacing="0">
  <tr> 
    <td width="43%"><div align="center">方法 </div></td>
    <td width="57%"><div align="center">说明</div></td>
  </tr>
  <tr> 
    <td>Vector() </td>
    <td>构造方法，创建一个新的向量</td>
  </tr>
  <tr> 
    <td>Vector(int initialCapacity)</td>
    <td> 构造方法，创建一个容量为initialCapacity的向量</td>
  </tr>
  <tr> 
    <td>addElement(Object obj)</td>
    <td> 附加一个对象到向量的末尾，向量大小加1</td>
  </tr>
  <tr> 
    <td>clear() </td>
    <td>删除向量中的所有对象，大小清0</td>
  </tr>
  <tr> 
    <td>boolean contain(Object obj) </td>
    <td>如果obj是向量中的对象返回true，反之false</td>
  </tr>
  <tr> 
    <td>Object elementAt(int index) </td>
    <td>返回向量中index位置的对象，index必须在0～size()-1范围内</td>
  </tr>
  <tr> 
    <td>Object firstElement() </td>
    <td>返回向量中第一个对象</td>
  </tr>
  <tr> 
    <td>int indexOf(Object obj) </td>
    <td>在向量中搜索对象obj，如找到返回其位置，反之返回-1</td>
  </tr>
  <tr> 
    <td>insertElementAt(Object obj，int index) </td>
    <td>将对象obj插入到向量中的index位置，大小加1</td>
  </tr>
  <tr> 
    <td>boolean isEmpty() </td>
    <td>如果向量为空，返回true，反之false</td>
  </tr>
  <tr> 
    <td>Object lastElement() </td>
    <td>返回向量中的最后一个对象</td>
  </tr>
  <tr> 
    <td>boolean removeElement(Object obj)</td>
    <td> 删除向量中最前面出现的obj对象，大小减1。如果找到且删除成功返回true，反之false</td>
  </tr>
  <tr> 
    <td>Object removeElementAt(int index)</td>
    <td> 删除向量中index位置的对象，并返回该对象</td>
  </tr>
  <tr> 
    <td>void setElementAt(Object obj,int index) </td>
    <td>将向量中index位置的对象用obj替换</td>
  </tr>
  <tr> 
    <td>int size() </td>
    <td>返回向量中对象的数量</td>
  </tr>
</table>
<p align="center" class="t1">向量类举例</p>
　　<a href="ch6/ch6ex23.java" target="_blank">【例6-23】编程实现一个通信录，系统应该包含增加新的人员、删除已有的人员、搜索某一人员，同时保证通信录中所有人员的姓名必须是惟一的</a>。<br>
　　<img src="images/STAR.GIF" width="18" height="20">设计人员类：<br>
　　　　<img src="images/STAR1.GIF" width="15" height="20">假设人员包含的属性有：姓名、电话（办公、家庭、手机、小灵通）、单位、职务、邮编、电子邮件、查询次数。<br>
　　　　<img src="images/STAR1.GIF" width="15" height="20">人员应具备的方法有：构造方法创建对象并输入上述属性，查询次数初始化为0；显示方法用于输出本对象的属性、比较姓名方法，该方法采用重载方式，一个参数为对象，另一个参数为字符串，其功能是比较两个姓名是否相同，如相同返回true，反之返回false；统计查询次数方法，每次查询记数器加1；比较姓名方法，该方法主要用于插入新的用户时，它比较姓名的大小，以便将新用户按递增序插入；获得姓名，该方法返回本对象的姓名。<br>
　　<img src="images/STAR.GIF" width="18" height="20"> 设计通信录类：<br>
　　　　<img src="images/STAR1.GIF" width="15" height="20">通信录包含的属性有：人员类的集合，可以使用类向量来实现。<br>
　　　　<img src="images/STAR1.GIF" width="15" height="20">通信录应具备的方法：构造方法具体创建一个类向量；增加新的人员，该方法首先检查是否有同名的记录，如有则不进行任何操作，返回false，反之插入新的记录，返回true；检查是否有重复方法是一个私有方法，它供通信录中其他方法的调用；搜索通信录，该方法根据用户输入的姓名检索通信录类向量，如果找到，显示该人员属性且查询次数加1，返回true，反之返回false；删除人员记录，首先利用用户输入的姓名检查是否存在该记录、如存在删除，返回true，表示成功删除，反之返回false；显示通信录，按照类向量中记录排列次序依次输出。<br>
　　<img src="images/STAR.GIF" width="18" height="20">设计菜单类：菜单类使用一个菜单选项数组和一个菜单标题作为参数，其功能是显示菜单并返回用户的选择。<br>
　　<img src="images/STAR.GIF" width="18" height="20">设计主类：主类中创建一个通信录的对象，然后根据用户的选择，执行相应的操作。<br>
<p align="center" class="t1">清除工作</p>
　　不安全的编程已经成为编程昂贵的主要症结之一。而其中两个主要的安全问题是初始化和清除。<br>
　　<img src="images/STAR.GIF" width="18" height="20">Java语言在对象创建时使用new关键字自动调用构造函数初始化对象存储空间<br>
　　<img src="images/STAR.GIF" width="18" height="20">Java还增加一个“垃圾收集器（garbage 
collector）”，它用于当对象不再使用时，自动释放对象内存（堆）。<br>
　　<img src="images/STAR.GIF" width="18" height="20">但是垃圾收集器仅仅回收使用new分配的对象内存，它不知道如何释放其它特殊用途的资源，为此，Java类中提供可以定义的finalize( 
)方法，当垃圾收集器准备释放对象内存时，首先调用此方法并且仅在下一次垃圾收集器运行时回收对象的内存。因此finalize( )方法提供给用户在垃圾收集时间前完成一些自己需要完成的工作的能力。 
</body> 
</html> 
