<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"> 
<html> 
<head> 
<script language="JavaScript"> 
  var prePage="end";
  var nextPage="01.htm";
  var testPage="end";
  var labPage="end";
  var libraryPage="end";
  var studyPage="end";
  var homePage="end";
	function showwin(url,winname,properties){
		window.open(url,winname,properties)
	}
</script> 
<meta http-equiv="Content-Type" content="text/html; charset=gb2312"> 

<title>4.2字符处理</title> 
<link href="images/css.css" rel="stylesheet" type="text/css"> 
</head> 

<body topmargin="0">
<p align="center" class="t1"><br>
  
  字符</p>
<p>　　<img src="images/STAR.GIF" width="18" height="20">组成信息的基本符号除了各种类型数字或数据之外，还包括字符、运算符、标点符号以及控制符号等等。<br>
  　　<img src="images/STAR.GIF" width="18" height="20">将一个字符存放到内存单元时，实际上并不是将该字符本身放到内存单元中去，而是将该字符的ASCII代码放到存储单元中。<br>
  　　<img src="images/STAR.GIF" width="18" height="20">ASCII码是国际上使用最为广泛的字符等符号的编码方案，它采用7位二进制数表示一个字符（通常使用一个字节8位二进制存放一个字符，但最高位始终为0，即实际7位有效ASCII码），即27可以表示128个不同的字符。<br>
  　　<img src="images/STAR.GIF" width="18" height="20">Java语言采用Unicode编码系统，它是一种十六位的编码方式，而ASCII编码是Unicode码的一个子集，所以其操作的结果是一致的。<br>
　　<img src="images/STAR.GIF" width="18" height="20">字符常量的表达方式是通过单引号括起字符，例如‘A’、‘#’、‘+’、‘a’，它们的存储空间为2字节，而编码方式同ASCII码。</p>
<p align="center">
  <img src="images/04/041-1.jpg" width="579" height="430"> 　 </p>
<p align="center" class="t1">字符变量</p>
　　数据类型char用于定义字符变量。<br>
语法格式：<br>
char varname；<br>
例6：<br>
char ch=‘A’；//定义字符变量并初始化<br>
char sex；//定义字符变量<br>
<a href="ch4/ch4ex4.java" target="_blank">【例4-4】编程，输入一个字符，然后输出</a>。<br>
<p align="center" class="t1">字符处理方法</p>
<table width="89%" height="189" border="1" align="center" cellpadding="0" cellspacing="0">
  <tr> 
    <td><div align="center">方法</div></td>
    <td><div align="center">说明</div></td>
  </tr>
  <tr> 
    <td>Character.isDigit(ch)</td>
    <td>如果ch是一个数字，即‘0’～‘9’返回true，反之false</td>
  </tr>
  <tr> 
    <td> Character.isLetterOrDigit(ch)</td>
    <td>如果ch是一个字符‘A’～‘Z’、‘a’～‘z’或数字，返回true，反之false</td>
  </tr>
  <tr> 
    <td>Character.isLowerCase(ch)</td>
    <td>如果ch是一个小写字符，返回true，反之false</td>
  </tr>
  <tr> 
    <td>Character.isUpperCase(ch)</td>
    <td>如果ch是一个大写字符，返回true，反之false</td>
  </tr>
  <tr> 
    <td>Character.toUpperCase(ch) </td>
    <td> 将ch转换成大写字符，如果ch已经是大写，则保持不变</td>
  </tr>
  <tr> 
    <td>Character.isLowerCase(ch)</td>
    <td>将ch转换成小写字符，如果ch已经是小写，则保持不变</td>
  </tr>
</table>
<p align="center" class="t1">字符处理方法举例</p>
　　<img src="images/STAR.GIF" width="18" height="20">字符类型在内存是按照ASCII二进制形式存放的，所以ASCII码表中的所有字符根据它们ASCII码值是有前后次序（大小区别）。<br>
　　<img src="images/STAR.GIF" width="18" height="20">字符类型只能包括一个字符，如‘W’，而‘AB’是非法的。<br>
<a href="ch4/ch4ex5.java" target="_blank">【例4-5】编程，输入一个字符，利用表中方法判断并进行转换</a>。<br>
<br>
<a href="ch4/ch4ex6.java" target="_blank">【例4-6】编程实现输入三个字符ch1，ch2，ch3，然后按递减次序输出</a>。<br>
　　<img src="images/STAR.GIF" width="18" height="20">程序中Keyboard.skipLine()语句的作用是移取缓冲区中的回车符。<br>
<a href="ch4/ch4ex7.java">【例4-7】编程产生和输出ASCII码表</a>。<br>
　　<img src="images/STAR.GIF" width="18" height="20">ASCII码0100000（十进制32）到1111110（十进制126）都是可打印的字符。程序可以从32到126循环，然后在输出时，将int类型强制转换成char类型。<br>
int j ；<br>
char ch；<br>
for（j=32；j&lt;=126；j++）{<br>
　　ch=(char)j;<br>
　　//output and process next char ch<br>
}<br>
<a href="ch4/ch4ex8.java" target="_blank">【例4-8】编程读取一系列字符（大小写认为相同），以‘#’表示输入结束，计算每个字符的频率并输出</a>。<br>
英文字符总共26个，所以程序中应定义一个存放每个字符频率的数组，其初始均为0；<br>
int freq[]=new int[26]；<br>
for（int j=0；j&lt;26；j++）<br>
　　freq[j]=0;<br>
读取一系列字符包括三个方面的任务：<br>
　　<img src="images/STAR.GIF" width="18" height="20">判断是否为英文字符：1000001（‘A’，十进制65）～1011010（‘Z’，十进制90）；1100001（‘a’，十进制97）～1111010（‘z’，十进制122）。’A’=&lt;ch&lt;=’Z’ 
或 ‘a’=&lt;ch&lt;=’z’<br>
　　<img src="images/STAR.GIF" width="18" height="20">利用Character.toUpperCase(ch)方法，将字符统一转换成大写再计算频率<br>
　　<img src="images/STAR.GIF" width="18" height="20">计算频率时，根据大写字符ASCII码的特征，可以计算对应频率数组的下标为：index=（int）ch-（int）‘A’。例如ch=’c’，则index=67-65=2。<br>
</body> 
</html> 
