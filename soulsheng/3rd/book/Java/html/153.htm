<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"> 
<html> 
<head> 
<meta http-equiv="Content-Type" content="text/html; charset=gb2312"> 

<title>15.3 JavaBeans和EJB</title> 
<link href="images/css.css" rel="stylesheet" type="text/css"> 
</head> 

<body topmargin="0">
<p align="center" class="t1"><br>
什么是JavaBeans</p>
<p>　　<img src="images/star.gif" width="18" height="20">JavaBeans是一个组件，可以在应用程序中使用，也可以提供给其他的应用程序使用。 <br>
  　　<img src="images/star.gif" width="18" height="20">JavaBeans API 是能编写Java程序语言的组件软件。组件是自我包含的，可以重复使用的软件部分。它能构成复合组件、小应用程序、应用程序和servlets。 <br>
　　<img src="images/star.gif" width="18" height="20">JavaBeans是最流行的Beans，而Beans是可以添加到小程序或应用程序的组件。 <br>
　　<img src="images/star.gif" width="18" height="20">Beans公开公共方法、事件和可视化的工具操等特征。 <br>
　　<img src="images/star.gif" width="18" height="20">JavaBeans建立器能检查Beans模式，辩别其特征，并为可视化操作公开它们的特征。建立器保留Beans在一个选项板或工具箱，用户可以从工具箱选择一个Bean，拖动其到指定窗口，修改它的外观和行为，定义它和其他Beans的相互作用, 组成它和其他Beans到一个小程序（Applet），应用程序或组成一个新的Bean。 <br>
　　<img src="images/star.gif" width="18" height="20">一个JavaBean可以表示为一个简单的GUI的直观方法，如按钮、编辑框和菜单等，也可以生成不可见的Beans，用于接受事件或在后台工作，处于业务逻辑等。在JSP中所用的Beans一般为不可见的组件。 </p>
<p align="center"><span class="t1"><strong>JavaBeans的主要属性</strong></span></p>
<p> JavaBeans的属性和Java程序中对象的属性及面向对象理论中的属性在概念上是相同的，也就是类的成员变量。<br>
　　<img src="images/STAR.GIF" width="18" height="20">Simple属性：简单属性是一个伴随一对get/set方法的变量，并且属性名与该属性相关的get/set方法名对应。<br>
　　　例3：如果有setX()和getX()方法，则暗指一个名为X的属性。<br>
　　　例4：如果把有一个方法名为isX，则表明X是一个值是布尔型的。<br>
<a href="ch15/FirstBean.java" target="_blank">FirstBean.java</a><br>
    　　<img src="images/STAR.GIF" width="18" height="20">Indexed属性：即JavaBeans数组属性，可以通过set/get方法设置/读取数组中的数值。<br>
    <a href="ch15/secondBean.java" target="_blank">secondBean.java    </a><br>
  　　<img src="images/STAR.GIF" width="18" height="20">Bound属性：如果一个属性的值发生变化需要通知其他对象，则称该属性为Bound属性。每次属性改变时，这种属性就激活一个PropertyChange事件。事件中封装了属性名、属性的原始值及新值。这种事件传递到其他的Bean，至于接收事件Bean的反应则由其自身定义。<br>
  <a href="ch15/ThirdBean.java" target="_blank">ThirdBean.java</a><br>
　　<img src="images/STAR.GIF" width="18" height="20">Constrained属性：当某个属性的值要发生变化时，与这个属性已建立某种联系的其他对象可否决该属性的改变，我们称具有这种性质的属性为Constrained属性。Constrained属性的监听者通过PropertyVetoException异常来阻止属性值的改变。<br>
<a href="ch15/FourthBean.java" target="_blank">FourthBean.java</a></p>
<p align="center"><span class="t1"> <strong>JavaBeans的主要事件</strong></span></p>
<p>　　<img src="images/STAR.GIF" width="18" height="20">Java中的事件：事件从事件源到监听者的传递是通过对目标监听者对象的Java方法调用进行的。对每个特定事件的发生都相应地定义一个特定的方法。这些方法都定义在事件监听者接口中，这个接口要继承java.util.EventListener。实现事件监听者接口中一些或全部方法是就是事件监听者。 <br> 
　　<img src="images/STAR.GIF" width="18" height="20">事件状态对象：与事件发生有关的状态信息一般都封装在一个事件状态对象中，这个对象是java.util. EventObject的子类。因此，其命名一般以Event结尾，例如下例代码定义一个鼠标移动事件ExampleMouseMoveEvent类，可以看到它继承了java.util.EventObject类：<br>
例5：<br>
public class ExampleMouseMoveEvent extends java.util.EventObject{<br>
　　
protected int a,b;<br>
　　
//定义一个鼠标移动事件<br>
　　
ExampleMouseMoveEvent(java.awt.Component src,java.awt.Point loc){<br>　　　　
super(src);a=loc.x;b=loc.y;<br>
　　
}<br>　　
public Point getLocation(){//获取鼠标的位置<br>　　　　
return new java.awt.Point(a,b);<br>　　
}<br>
}<br>
  　　<img src="images/STAR.GIF" width="18" height="20">事件监听者接口与事件监听者：在JavaBean中，事件操纵方法都被定义在java.utilEventListener类的事件监听者接口中，按规定，事件监听者接口的命名要以Listener为后缀。任何一个类如果想操纵在事件监听者接口中定义的方法都必须实现这个接口。这个类也是事件监听者： <br>
例6：<br>
public class ExampleMouseMovedEvent extends java.util.EventObject{<br>　　
…<br>
}<br>
interface ExampleMouseMovedListener extends java.util.EventListener{<br>　　
void mouseMoved(ExampleMouseMovedEvent name);<br>
}<br>
例7：ArbitaryObject类实现了上面接口的mouseMoved方法：<br>
class ArbitaryObject implements ExampleMouseMovedListener{<br>
　　public vid mouseMoved(ExampleMouseMovedEvent name){<br>
　　
　…<br>　
}<br>
}
<br>
  　　<img src="images/STAR.GIF" width="18" height="20">注册与注销事件监听者：为了监听各种可能的事件，监听者把自己注册进入合适的事件源中，建立源与事件监听者之间的事件流，事件源必须为事件监听者提供注册和注销的方法。在实际应用中，事件监听者的注册和注销要使用标准的设计格式：<br>
  public void add &lt;ListenerType&gt;(&lt;ListenerType&gt;listener);<br>
  public void remove&lt;ListenerType&gt;(&lt;ListenerType&gt;listener);
  <br>
  　　<img src="images/STAR.GIF" width="18" height="20">适配类：适配类是java事件模型中很重要的一部分。在有些场合，事件从源到监听者之间的传递要通过适配类来“转发”。例如，当事件源发出一个事件，而有几个事件监听者对象都可以接收该事件，但只有指定对象做出响应时，就要在事件源与事件监听者之间插入一个事件适配器类，由适配器类来指定事件应该由哪些监听者来响应。 </p>
<p align="center" class="t1">  <strong>在JSP中使用JavaBeans</strong></p>
<p align="left">　　<img src="images/STAR.GIF" width="18" height="20">假设JavaBeans在创造站点之前就已经被构造，那么首先必须要让JSP页面知道要使用一个bean。这个步骤由&lt;jsp:useBean&gt;标签来完成：<br>
&lt;jsp:useBean id=&quot;localName&quot; class=&quot;com.jguru.Person&quot; scope=&quot;application&quot; /&gt;。<br>
  　　<img src="images/STAR.GIF" width="18" height="20">&lt;jsp:useBean&gt;标签需要利用id的属性来确定bean。也就是说，需要在静态JSP页面中提供一个名字来标签bean。 <br>
  　　<img src="images/STAR.GIF" width="18" height="20">除此之外，还需要告诉这个页面去什么地方找bean或者Java类的名字，class的属性提供了这个信息。 <br>
  　　<img src="images/STAR.GIF" width="18" height="20">最后一个必要的元素是scope属性。在它的帮助下，你可以利用beans来为一个页面(the default) [scope=&quot;page&quot;]、请求[scope=&quot;request&quot;]、生存期限[scope=&quot;session&quot;]或者整个应用[scope=&quot;application&quot;]提供信息。 <br>
  　　<img src="images/STAR.GIF" width="18" height="20">一旦定义了一个JavaBean，就有权使用它的属性来定义它。为了获得一个适当的值，就要使用&lt;jsp:getProperty&gt;标签，使用这个标签你可以详细的定义一个bean。它的实际属性将被放置在输出中：<br>
  &lt;jsp:getProperty id=&quot;localName&quot; property=&quot;name&quot; /&gt;。<br>
  　　<img src="images/STAR.GIF" width="18" height="20">如果想要改变JavaBean的属性，需要使用&lt;jsp:setProperty&gt;标签，利用这个标签你可以重新定义你的bean和属性并提供新的值。如果要改变命名的属性，这些可以直接从下面的形式中获得：<br>
  &lt;jsp:setProperty id=&quot;localName&quot; property=&quot;*&quot; /&gt;;
  <br>
  　　　　<img src="images/STAR1.GIF" width="15" height="20">可以从下面的形式中直接命名属性和参数：<br>
  &lt;jsp:setProperty id=&quot;localName&quot; property=&quot;address&quot; param=&quot;parameterName&quot; /&gt;;<br>  
  　　　　<img src="images/STAR1.GIF" width="15" height="20">或者直接设置名字和值：<br>
  &lt;jsp:setProperty id=&quot;localName&quot; property=&quot;serialNumber&quot; value=&quot;string&quot; /&gt;;<br>
  　　　　<img src="images/STAR1.GIF" width="15" height="20">或者<br>
&lt;jsp:setProperty id=&quot;localName&quot; property=&quot;serialNumber&quot; value= &lt;%= expression %&gt; /&gt;;<br>
  　　<img src="images/STAR.GIF" width="18" height="20">为了让Web服务器能够找到JavaBeans，需要在一个特别的地方放置它们的类文件。 </p>
<p align="center" class="t1">  <strong>企业JavaBeans（EJB）简介</strong></p>
<p> 　　<img src="images/STAR.GIF" width="18" height="20">EJB（Enterprise JavaBeans）：它不是一个产品。而是Java服务器端服务框架的规范，是J2EE（Java2 Platform ，Enterprise Edition）规范中最重要的组成部分。软件厂商根据它来实现EJB服务器。应用程序开发者可以专注于支持应用所需的商业逻辑，而不用担心周围框架的实现问题。EJB规范详细地解释了一些最小但是必须的服务，如事务、安全和名字等。软件厂商根据这些规范要求以保证一个EJB能使用某个必需的服务。规范并没有说明厂商如何实现这些服务。 <br>
  　　<img src="images/STAR.GIF" width="18" height="20">EJB和JavaBeans的区别：<br>
  　　　　<img src="images/STAR1.GIF" width="15" height="20">JavaBeans提供基于构件的开发机制，JavaBeans可以在多个应用系统中重用，开发者可以通过属性表或通过定制的方法来定制JavaBeans。多个JavaBean可以组合在一起构成Java Applet或Java应用程序，或建立新的JavaBeans，JavaBeans容器可以根据JavaBeans的属性、方法、事件的定义在设计时或运行时对JavaBeans进行操作。 <br>
  　　　　<img src="images/STAR1.GIF" width="15" height="20">在JavaBeans构件模型中，重点是允许开发人员可以在开发工具中可视化地操作构件，为此，JavaBeans详细地描述了API的细节，以及构件之间事件注册和发送，属性的识别和利用，定制，永久性等细节。 <br>
  　　　　<img src="images/STAR1.GIF" width="15" height="20">EJB是一种非可视化的构件，完全位于服务器端，规范详细说明了EJB容器需要满足的需求以及如何和EJB构件相互协作。EJB可以和远程的客户端程序通讯，并提供一定的功能，根据规范说明，EJB是客户/服务器（client/Server）系统的一部分，如果不和客户端程序交互，EJB一般不执行具体的功能，EJB和JavaBeans的一个重要区别是EJB必须在网络计算环境下使用才有意义。 <br>
  　　　　<img src="images/STAR1.GIF" width="15" height="20">EJB的重点是给出服务框架模型，以保证Java构件可以进行可移植性的部署，因此，在EJB规格说明中，并没有提到事件，因为典型的EJB构件不发送和接收事件，EJB规范说明中也没有提到属性。和一般的JavaBeans一样，EJB是高度可定制的，对EJB进行定制不需要存取源代码，但对EJB进行定制不是在开发阶段，而是在部署阶段使用部署描述符进行定制。</p>
</body> 
</html> 
